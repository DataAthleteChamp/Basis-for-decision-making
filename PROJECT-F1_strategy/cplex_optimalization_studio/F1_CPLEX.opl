// Parametry
float sredni_czas_okrazenia_S = 10;
float sredni_czas_okrazenia_M = 10.5;
float sredni_czas_okrazenia_H = 11.0;

int N = 50; // liczba okrążeń
float petrol = 90.0; // ilość dostępnego paliwa [l]
float tpit = 2.5; //czas pitstopu


float zuzycie_paliwa_S[1..N] = [0.9, 0.89, 0.88, 0.87, 0.86, 0.85, 0.84, 0.83, 0.82, 0.81, 0.8, 0.79, 0.78, 0.77, 0.76, 0.75, 0.74, 0.73, 0.72, 0.71, 0.7, 0.69, 0.68, 0.67, 0.66, 0.65, 0.64, 0.63, 0.62, 0.61, 0.6, 0.59, 0.58, 0.57, 0.56, 0.55, 0.54, 0.53, 0.52, 0.51, 0.5, 0.49, 0.48, 0.47, 0.46, 0.45, 0.44, 0.43, 0.42, 0.41];
float zuzycie_paliwa_M[1..N] = [0.8, 0.79, 0.78, 0.77, 0.76, 0.75, 0.74, 0.73, 0.72, 0.71, 0.7, 0.69, 0.68, 0.67, 0.66, 0.65, 0.64, 0.63, 0.62, 0.61, 0.6, 0.59, 0.58, 0.57, 0.56, 0.55, 0.54, 0.53, 0.52, 0.51, 0.5, 0.49, 0.48, 0.47, 0.46, 0.45, 0.44, 0.43, 0.42, 0.41, 0.4, 0.39, 0.38, 0.37, 0.36, 0.35, 0.34, 0.33, 0.32, 0.31];
float zuzycie_paliwa_H[1..N] = [0.7, 0.69, 0.68, 0.67, 0.66, 0.65, 0.64, 0.63, 0.62, 0.61, 0.6, 0.59, 0.58, 0.57, 0.56, 0.55, 0.54, 0.53, 0.52, 0.51, 0.5, 0.49, 0.48, 0.47, 0.46, 0.45, 0.44, 0.43, 0.42, 0.41, 0.4, 0.39, 0.38, 0.37, 0.36, 0.35, 0.34, 0.33, 0.32, 0.31, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21];
// zużycie paliwa na okrążenie dla opon danego typu [l/okrążenie]
// im mniej paliwa tym pojazd lżejszy => mniej pali na kolejnych okrążeniach (w f1 nie ma tankowania)


float kara_S[1..N] = [0,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23];
float kara_M[1..N] = [0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11];
float kara_H[1..N] = [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7];
// kara za nadprogramową ilość okrążen dla opon danego typu
//wymusza zmianę opon


int scieranie_S = 5;
int scieranie_M = 7;
int scieranie_H = 9; 
// liczba okrążeń kiedy opony się zetrą i zacznie się liczyć kara dla danego typu opon


// Zmienne decyzyjne
dvar int+ xS; 
dvar int+ xM;
dvar int+ xH;
// liczby okrążeń na oponach danego typu

dvar int+ pitstop_S;
dvar int+ pitstop_M;
dvar int+ pitstop_H;
// liczba pitstopów na oponach danego typu


// Funkcja celu
minimize
    xS * sredni_czas_okrazenia_S + sum(i in 1..N) maxl(0, xS - i)*kara_S[i] - sum(i in 1..N) maxl(0, xS-i-1)*kara_S[i]
    + xM * sredni_czas_okrazenia_M + sum(i in 1..N) maxl(0, xM - i)*kara_M[i] - sum(i in 1..N) maxl(0, xM-i-1)*kara_M[i]
    + xH * sredni_czas_okrazenia_H + sum(i in 1..N) maxl(0, xH - i)*kara_H[i] - sum(i in 1..N) maxl(0, xH-i-1)*kara_H[i]
    + (pitstop_S + pitstop_M + pitstop_H)*tpit;
// minimalizacja czasu przejazdu
//np dla xs=10 krok1 9*Y-8*Y=Y krok2 8*Y-7*Y=Y itd...


// ograniczenia
subject to {
    xS + xM + xH == N; 
    //łączna liczba okrążen jest równa sumie okrążeń na poszczególnych oponach

    sum(i in 1..N) maxl(0, xS - i)*zuzycie_paliwa_S[i] - sum(i in 1..N) maxl(0, xS - i - 1)*zuzycie_paliwa_S[i] 
    + sum(i in 1..N) maxl(0, xM - i)*zuzycie_paliwa_M[i] - sum(i in 1..N) maxl(0, xM - i - 1)*zuzycie_paliwa_M[i]
    + sum(i in 1..N) maxl(0, xH - i)*zuzycie_paliwa_H[i] - sum(i in 1..N) maxl(0, xH - i - 1)*zuzycie_paliwa_H[i] <= petrol-1;
    //np dla xs=10 krok1 9*Y-8*Y=Y krok2 8*Y-7*Y=Y itd...
//suma kolejnych wartości zużycia paliwa dla odpowiedniego typu opon ma się mieścić w dostepnym paliwie -1
//zasada w f1 (petrol-1)-> na końcu wyścigu w baku ma zostać minimum 1l paliwa

     pitstop_S >= (xS / scieranie_S)-1;
     pitstop_M >= (xM / scieranie_M)-1;
     pitstop_H >= (xH / scieranie_H)-1;
     // żeby korzytsać z kary trzeba pomniejszyć ograniczenie -1
  	
}
